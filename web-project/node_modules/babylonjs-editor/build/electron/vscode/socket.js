"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const IO = require("koa-socket");
class VSCodeSocket {
    /**
     * Constructor
     * @param webServer: the web server instance
     */
    constructor(webServer) {
        this.editorSocket = null;
        this.vsCodeSocket = null;
        // Private members
        this._editorConnected = false;
        this._vsCodeConnected = false;
        this.webServer = webServer;
        // Socket
        this.createSocket();
    }
    /**
     * Creates the sockets for editor and vscode
     */
    createSocket() {
        // Server
        this.editorSocket = new IO('vscode');
        this.editorSocket.attach(this.webServer.localApplication);
        // Client
        this.vsCodeSocket = new IO('vscode-extension');
        this.vsCodeSocket.attach(this.webServer.localApplication);
        // Listen
        this.listen();
        // Manage state
        this.editorSocket.on('disconnect', () => this._editorConnected = false);
        this.editorSocket.on('connection', () => this._editorConnected = true);
        this.vsCodeSocket.on('disconnect', () => this._vsCodeConnected = false);
        this.vsCodeSocket.on('connection', () => this._vsCodeConnected = true);
    }
    /**
     * Listens for events to broardcast
     */
    listen() {
        // Work as mirror
        this.editorSocket.on('project', (p) => this.vsCodeSocket.broadcast('project', p.data));
        this.vsCodeSocket.on('refresh', () => this.editorSocket.broadcast('refresh'));
        this.editorSocket.on('behavior-codes', (c) => this.vsCodeSocket.broadcast('behavior-codes', c.data));
        this.vsCodeSocket.on('update-behavior-code', (s) => this.editorSocket.broadcast('update-behavior-code', s.data));
        this.editorSocket.on('material-codes', (c) => this.vsCodeSocket.broadcast('material-codes', c.data));
        this.vsCodeSocket.on('update-material-code', (c) => this.editorSocket.broadcast('update-material-code', c.data));
        this.editorSocket.on('post-process-codes', (c) => this.vsCodeSocket.broadcast('post-process-codes', c.data));
        this.vsCodeSocket.on('update-post-process-code', (c) => this.editorSocket.broadcast('update-post-process-code', c.data));
        this.editorSocket.on('behavior-graphs', (c) => this.vsCodeSocket.broadcast('behavior-graphs', c.data));
        this.vsCodeSocket.on('update-behavior-graph', (c) => this.editorSocket.broadcast('update-behavior-graph', c.data));
        this.editorSocket.on('scene-infos', (i) => this.vsCodeSocket.broadcast('scene-infos', i.data));
        this.editorSocket.on('set-selected-object', (i) => this.vsCodeSocket.broadcast('set-selected-object', i.data));
    }
}
exports.default = VSCodeSocket;
//# sourceMappingURL=socket.js.map