"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const electron_1 = require("electron");
const KoaRouter = require("koa-router");
const settings_1 = require("../settings/settings");
class ToolsRouter {
    /**
     * Constructor
     * @param application: the KOA application
     */
    constructor(webServer) {
        this.webServer = webServer;
        this.router = new KoaRouter();
        // Create routes
        this.openDevTools();
        this.getVersion();
        this.getOsPlatform();
        this.getAddress();
        this.getOpenedFile();
        this.setOpenedFile();
        webServer.localApplication.use(this.router.routes());
        webServer.externApplication.use(this.router.routes());
    }
    /**
     * Opens the devtools for the current focused window
     */
    openDevTools() {
        this.router.get('/devTools', (ctx, next) => __awaiter(this, void 0, void 0, function* () {
            const win = electron_1.BrowserWindow.getFocusedWindow();
            if (win) {
                win.webContents.openDevTools({
                    mode: 'detach'
                });
                setTimeout(() => win.focus(), 2000);
            }
            ctx.body = {
                message: 'success'
            };
        }));
    }
    /**
     * Returns the editor's version set from the package.json
     */
    getVersion() {
        this.router.get('/version', (ctx, next) => __awaiter(this, void 0, void 0, function* () {
            const json = require('../../../package.json');
            ctx.body = json.version;
        }));
    }
    /**
     * Returns the installer path according to the current platform
     */
    getOsPlatform() {
        this.router.get('/osplatform', (ctx, next) => __awaiter(this, void 0, void 0, function* () {
            ctx.body = os.platform();
        }));
    }
    /**
     * Gets the current server address
     */
    getAddress() {
        this.router.get('/address', (ctx, next) => __awaiter(this, void 0, void 0, function* () {
            ctx.body = this.webServer.address;
        }));
    }
    /**
     * Returns the opened file path
     */
    getOpenedFile() {
        this.router.get('/openedFile', (ctx, next) => __awaiter(this, void 0, void 0, function* () {
            ctx.body = settings_1.default.OpenedFile;
        }));
    }
    /**
     * Sets the opened file path
     */
    setOpenedFile() {
        this.router.post('/openedFile', (ctx, next) => __awaiter(this, void 0, void 0, function* () {
            settings_1.default.OpenedFile = ctx.request.body.value;
            ctx.body = {
                message: 'success'
            };
        }));
    }
}
exports.default = ToolsRouter;
//# sourceMappingURL=tools.js.map