"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = require("os");
const Koa = require("koa");
const KoaBodyParser = require("koa-bodyparser");
const KoaStatic = require("koa-static");
const storage_1 = require("./routes/storage");
const tools_1 = require("./routes/tools");
const socket_1 = require("./vscode/socket");
class WebServer {
    /**
     * Constructor
     * @param port: the port
     */
    constructor() {
        // Static members
        this.address = 'localhost';
        this.localApplication = new Koa();
        this.localApplication.proxy = true;
        this.externApplication = new Koa();
        this.externApplication.proxy = true;
        // Body parser
        const koaBodyParser = KoaBodyParser({
            formLimit: '200mb',
            jsonLimit: '200mb'
        });
        this.localApplication.use(koaBodyParser);
        this.externApplication.use(koaBodyParser);
        // Static
        const koaStatic = KoaStatic('.');
        this.localApplication.use(koaStatic);
        this.externApplication.use(koaStatic);
        new storage_1.default(this.localApplication);
        new tools_1.default(this);
        new socket_1.default(this);
    }
    /**
     * Listen to the given port
     * @param port the port to listen
     */
    listen(port) {
        // Local
        this.localApplication.listen(port, 'localhost');
        // Extern
        const interfaces = os_1.networkInterfaces();
        if (interfaces['Wi-Fi']) { // Wi-fi?
            for (const j of interfaces['Wi-Fi']) {
                if (!j.internal && j.family === 'IPv4') {
                    this.address = j.address;
                    this.externApplication.listen(port, j.address);
                    return;
                }
            }
        }
        for (const i in interfaces) { // Other?
            for (const j of interfaces[i]) {
                if (!j.internal && j.family === 'IPv4') {
                    this.address = j.address;
                    this.externApplication.listen(port, j.address);
                    return;
                }
            }
        }
    }
}
exports.default = WebServer;
//# sourceMappingURL=web-server.js.map